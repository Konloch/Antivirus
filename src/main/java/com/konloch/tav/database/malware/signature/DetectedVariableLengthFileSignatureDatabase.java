package com.konloch.tav.database.malware.signature;

import com.konloch.TraditionalAntivirus;
import com.konloch.tav.database.malware.MalwareSignatureDatabase;
import com.konloch.tav.scanning.FileSignature;
import com.konloch.tav.scanning.MalwareScanFile;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Handle variable length signatures through static file lookup
 *
 * @author Konloch
 * @since 6/21/2024
 */
public class DetectedVariableLengthFileSignatureDatabase implements MalwareSignatureDatabase
{
	//TODO replace with SQLite
	public final HashMap<String, ArrayList<FileSignature>> fileHashLookup = new HashMap<>();
	
	@Override
	public void load()
	{
		loadBazaarDatabase();
		loadVShareDatabase();
	}
	
	private void loadBazaarDatabase()
	{
		loadHashFile(new File(TraditionalAntivirus.TAV.tavDB.getWorkingDirectory(), "mbazaar/full.sha256"));
	}
	
	private void loadVShareDatabase()
	{
		File vshareFolder = new File(TraditionalAntivirus.TAV.tavDB.getWorkingDirectory(), "vshare");
		
		if(!vshareFolder.exists())
			return;
		
		File[] vshareHashFiles = vshareFolder.listFiles();
		
		if(vshareHashFiles == null)
			return;
		
		for(File vshareHashFile : vshareHashFiles)
		{
			loadHashFile(vshareHashFile);
		}
	}
	
	private void loadHashFile(File hashFile)
	{
		try (BufferedReader reader = new BufferedReader(new FileReader(hashFile)))
		{
			String line;
			while ((line = reader.readLine()) != null)
			{
				if(line.isEmpty() || line.startsWith("#"))
					continue;
				
				FileSignature fileSignature = new FileSignature(line, 0, null);
				
				if(!fileHashLookup.containsKey(fileSignature.hash))
					fileHashLookup.put(fileSignature.hash, new ArrayList<>());
				
				ArrayList<FileSignature> fileSignatures = fileHashLookup.get(fileSignature.hash);
				fileSignatures.add(fileSignature);
				TraditionalAntivirus.TAV.malwareDB.detectedStaticLengthFileSignatureDatabase.totalCount++;
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	@Override
	public String detectAsMalware(MalwareScanFile file)
	{
		String result;
		if((result = detectAsMalware(file, file.getMD5Hash())) != null)
			return result;
		
		if((result = detectAsMalware(file, file.getSHA1Hash())) != null)
			return result;
		
		if((result = detectAsMalware(file, file.getSHA256Hash())) != null)
			return result;
		
		return null;
	}
	
	private String detectAsMalware(MalwareScanFile file, String hash)
	{
		ArrayList<FileSignature> fileSignatures = fileHashLookup.get(hash);
		
		if(fileSignatures != null)
		{
			for(FileSignature fileSignature : fileSignatures)
				return fileSignature.doesDetectAsMalwareType(file);
		}
		
		return null;
	}
}
