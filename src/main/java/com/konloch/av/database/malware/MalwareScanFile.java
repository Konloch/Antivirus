package com.konloch.av.database.malware;

import com.konloch.av.utils.HashUtils;

import java.io.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/**
 * @author Konloch
 * @since 6/21/2024
 */
public class MalwareScanFile
{
	private File file;
	private byte[] fileContents;
	private long size;
	private String SHA1Hash;
	private String SHA256Hash;
	private String MD5Hash;
	
	public MalwareScanFile(File file)
	{
		this.file = file;
		size = file.length(); //NOTE: this is blocking
	}
	
	//when passing a byte[] it will preform the hash immediately to conserve memory
	public MalwareScanFile(byte[] fileContents)
	{
		this.fileContents = fileContents;
		size = fileContents.length;
		hash();
		this.fileContents = null;
	}
	
	public void hash()
	{
		if(SHA1Hash != null)
			return;
		
		InputStream fis = null;
		try
		{
			fis = fileContents != null ? new ByteArrayInputStream(fileContents) : new FileInputStream(file);
			
			//create the digest for each hash
			MessageDigest sha1Digest = MessageDigest.getInstance("SHA-1");
			MessageDigest sha256Digest = MessageDigest.getInstance("SHA-256");
			MessageDigest md5Digest = MessageDigest.getInstance("MD5");
			
			//read the entire file & update the hash
			byte[] buffer = new byte[8192];
			int bytesRead;
			while ((bytesRead = fis.read(buffer)) != -1)
			{
				sha1Digest.update(buffer, 0, bytesRead);
				sha256Digest.update(buffer, 0, bytesRead);
				md5Digest.update(buffer, 0, bytesRead);
			}
			
			//digest for the result
			SHA1Hash = HashUtils.bytesToHex(sha1Digest.digest());
			SHA256Hash = HashUtils.bytesToHex(sha256Digest.digest());
			MD5Hash = HashUtils.bytesToHex(md5Digest.digest());
		}
		catch (NoSuchAlgorithmException | IOException e)
		{
			e.printStackTrace();
		}
		finally
		{
			if (fis != null)
			{
				try
				{
					fis.close();
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
			}
		}
	}
	
	public File getFile()
	{
		return file;
	}
	
	public long getSize()
	{
		return size;
	}
	
	public String getSHA1Hash()
	{
		return SHA1Hash;
	}
	
	public String getSHA256Hash()
	{
		return SHA256Hash;
	}
	
	public String getMD5Hash()
	{
		return MD5Hash;
	}
	
}
